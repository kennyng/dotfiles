" vim: set foldmethod=marker foldlevel=0:
" ============================================================================
" Kenny Ng's .vimrc
" ============================================================================
set nocompatible

" ============================================================================
" INSTALLED PLUGINS {{{
" ============================================================================

" Automatically install vim-plug if missing.
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" ----------------------------------------------------------------------------
" STYLE & COLORS
" ----------------------------------------------------------------------------
" statusbar/tabline
Plug 'vim-airline/vim-airline'
" vim-airline themes
Plug 'vim-airline/vim-airline-themes'
" base16 color themes
Plug 'chriskempson/base16-vim'

" ----------------------------------------------------------------------------
" EDITING
" ----------------------------------------------------------------------------
" easily change, add, delete surroundings in pairs
Plug 'tpope/vim-surround'
" rename files from within vim
Plug 'tpope/vim-eunuch'
" split and join lines of code intelligently
Plug 'AndrewRadev/splitjoin.vim'
" undo history visualizer
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }

" ----------------------------------------------------------------------------
" SYNTAX & LANGUAGE
" ----------------------------------------------------------------------------
" general syntax checker
Plug 'scrooloose/syntastic'
" simple tab completion
Plug 'ajh17/VimCompletesMe'
" pandoc syntax module
Plug 'vim-pandoc/vim-pandoc-syntax', { 'for': 'markdown.pandoc' }

" ----------------------------------------------------------------------------
" MISCELLANEOUS
" ----------------------------------------------------------------------------
" add-on to netrw browser
Plug 'tpope/vim-vinegar'
" git wrapper
Plug 'tpope/vim-fugitive'
" support interactions between and REPL
Plug 'jpalardy/vim-slime'
" display indentation level
Plug 'Yggdroot/indentLine', { 'on': 'IndentLinesEnable' }
" lookup documentation
if has('mac')
    Plug 'rizzatti/dash.vim',  { 'on': '<Plug>DashSearch' }
endif


call plug#end()

" Enable filetype detection and loading plugin/indent files.
"filetype plugin indent on
" Enable syntax highlighting.
"syntax on


" }}}
" ============================================================================
" BASIC CONFIGURATIONS {{{
" ============================================================================

" Set colorscheme.
if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif
set background=light

" Copy indent from current line when starting new line.
set autoindent

" Enable backspace in insert-mode.
set backspace=indent,eol,start

" Remove i from vim search autocomplete.
set complete-=i

" For html, javascript, and text, set indent to width 2.
autocmd FileType html setlocal shiftwidth=2 tabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
autocmd FileType text setlocal shiftwidth=2 tabstop=2

" Set default indent to width 4.
set shiftwidth=4
set tabstop=4" Use spaces instead of tab.
set expandtab

" Auto change working directory to inherit from current file (set autochdir).
autocmd BufEnter * if expand("%:p:h") !~ '^/tmp' | silent! lcd %:p:h | endif

" Enable unicode encoding.
set encoding=utf-8
" Remove octal number format recognition (for 00, 01,...).
set nrformats-=octal

" Do timeout on terminal key codes.
set ttimeout
" Timeout after 100ms.
set ttimeoutlen=100

" Allow leaving/switching modified buffers.
set hidden

" Start incremental searching before <enter>.
set incsearch

" Always enable status line.
set laststatus=2
" Show info about current cmd on status line.
set showcmd
" Show visual feedback in status.
set showmode

" Enable command line completion to expand to menu.
set wildmenu
" Ignore some file extensions with <TAB> completion.
set wildignore=*.swp,*.bak,*.pyc,*.class

" Add line numbers.
set number
" Set column highlight at 80 char.
set colorcolumn=80

" Always show line(s) above/below cursor.
if !&scrolloff
    set scrolloff=1
endif
if !&sidescrolloff
    set sidescrolloff=5
endif
" Display as many lines as possible.
set display+=lastline

" Makes :set list (visible whitespace) prettier.
if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

" Auto read file again if changed outside of vim.
set autoread
" Support mac file formats.
set fileformats+=mac

" Remember 1000 search history and command entries.
set history=1000
" Set larger (1000 levels) undo buffer.
set undolevels=1000
" Set max number of tabs.
if &tabpagemax < 20
    set tabpagemax=20
endif
" Save global variables.
if !empty(&viminfo)
    set viminfo^=!
endif
" Do not store current options in session.
set sessionoptions-=options

" Enable code folding.
augroup vimrc
    au BufReadPre * setlocal foldmethod=indent
    au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END
set foldlevel=99


" }}}
" ============================================================================
" CUSTOM FUNCTIONS {{{
" ============================================================================

" diff current buffer with original/saved version.
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! Diffbuf call s:DiffWithSaved()


" Run unix commands without prompt popping up.
command! -nargs=1 RunSilent
    \ | execute ':silent !'.<q-args>
    \ | execute ':redraw!'


" }}}
" ============================================================================
" KEY MAPPINGS {{{
" ============================================================================

" Remap <Leader> key from '\' to ','.
let mapleader=','

" Remap <ESC> key.
inoremap jk <esc>
inoremap kj <esc>

" Toggle paste mode.
nnoremap <F8> :set invpaste paste?<CR>
set pastetoggle=<F8>

" Avoid accidental <C-U> (cannot undo delete)
inoremap <C-U> <C-G>u<C-U>

" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

" Mappings for opening files in tabs.
command -nargs=1 -complete=file TT tabfind <args>


" }}}
" ============================================================================
" PLUGIN CONFIGURATIONS
" ============================================================================
" ----------------------------------------------------------------------------
" Default {{{
" ----------------------------------------------------------------------------
" Enable extended '%' matching.
runtime macros/matchit.vim

" }}}
" ----------------------------------------------------------------------------
" vim-airline {{{
" ----------------------------------------------------------------------------
" Use powerline patched fonts.
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" Enable tabline for buffers.
let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#tab_nr_type = 0
let g:airline#extensions#tabline#show_tab_type = 1
" Disable buffers for single tab on tabline.
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#close_symbol = ''
" Change airline color theme.
let g:airline_theme='base16'
" Enable syntastic integration.
let g:airline#extensions#syntastic#enabled = 1
" Enable fugitive integration
let g:airline#extensions#branch#enabled = 1

" }}}
" ----------------------------------------------------------------------------
" syntastic {{{
" ----------------------------------------------------------------------------
" Use command :SyntasticCheck to explicitly invoke syntax check.
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
" Always stick any detected errors into error window (default: 0).
"let g:syntastic_always_populate_loc_list = 1
" Autmatically open and/or close error window (default: 2).
"let g:syntastic_auto_loc_list = 1
" Check for errors on file open (default: 1).
"let g:syntastic_check_on_open = 1
" Check for errors on file save and close (default: 1).
"let g:syntastic_check_on_wq = 1
" Set synastic symbols for marking syntax errors (default: 1).
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = '❌'
let g:syntastic_style_error_symbol = '⁉️'
let g:syntastic_warning_symbol = '⚠️'
let g:syntastic_style_warning_symbol = '💩'
highlight link SyntasticErrorSign SignColumn
highlight link SyntasticWarningSign SignColumn
highlight link SyntasticStyleErrorSign SignColumn
highlight link SyntasticStyleWarningSign SignColumn
" Change highlight colors (SpellBad => Errors, SpellCap => Warnings).
highlight SpellBad ctermfg=015 ctermbg=160 guifg=#ffffff guibg=#d70000
highlight SpellCap ctermfg=015 ctermbg=184 guifg=#ffffff guibg=#dfdf00
" Specify syntax checkers and ignore rules.
let g:syntastic_python_checkers = ['flake8', 'python']
let g:syntastic_python_flake8_args = '--ignore=E501'
let g:syntastic_c_checkers = ['make', 'gcc']
let g:syntastic_javascript_checkers = ['standard']

" }}}
" ----------------------------------------------------------------------------
" vim-pandoc-syntax {{{
" ----------------------------------------------------------------------------
" Set pandoc filetype.
augroup pandoc_syntax
    au! BufNewFile,BufFilePRe,BufRead *.md set filetype=markdown.pandoc
augroup END

" Map commands to compile pandoc markdown to html.
nmap <Leader>pc :RunSilent pandoc -s --mathjax -c ~/Projects/_gists/github-pandoc.css -o /tmp/vim-pandoc-out.html %<CR>
nmap <Leader>pp :RunSilent open -a /Applications/Google\ Chrome.app /tmp/vim-pandoc-out.html<CR>

" Use |conceal| for pretty highlighting (default: 1).
let g:pandoc#syntax#conceal#use = 0
" Blacklist for |conceal| (default: []).
"let g:pandoc#syntax#conceal#blacklist = ['atx', 'ellipses']
" Specify languages and syntax files for highlighting code embeds.
let g:pandoc#syntax#codeblocks#embdeds#langs = ['python', 'c', 'r', 'tex', 'javascript', 'json=javascript']
" Use italics and strong in emphases (default: 1).
let g:pandoc#syntax#style#emphases = 0
" Enable underline, subscript, subscript, strikeout styles (default: 1).
"let g:pandoc#syntax#style#underline_special = 0


" }}}
" ----------------------------------------------------------------------------
" splitjoin {{{
" ----------------------------------------------------------------------------
let g:splitjoin_split_mapping = ''
let g:splitjoin_join_mapping = ''
nnoremap gss :SplitjoinSplit<cr>
nnoremap gsj :SplitjoinJoin<cr>

" }}}
" ----------------------------------------------------------------------------
" vim-slime {{{
" ----------------------------------------------------------------------------
" Set tmux as default session manager [Default: screen].
let g:slime_target = 'tmux'
" Set paste file for sending inputs [Default: $HOME/.slime_paste].
let g:slime_paste_file = tempname()
" Set default configuration options for prompt.
let g:slime_default_config = {'socket_name': 'default', 'target_pane': ':0.2'}
" Bypass prompt and use the specified default configuration options.
let g:slime_dont_ask_default = 1
" Use iPython's %cpaste function for error-free pasting.
let g:slime_python_ipython = 1

" }}}
" ----------------------------------------------------------------------------
" undotree {{{
" ----------------------------------------------------------------------------
let g:undotree_WindowLayout = 2
nnoremap U :UndotreeToggle<CR>

" }}}
" ----------------------------------------------------------------------------
" indentLine {{{
" ----------------------------------------------------------------------------
autocmd! User indentLine doautocmd indentLine Syntax
" Specify whether to enable indentLine (default: 1).
let g:indentLine_enabled = 0
let g:indentLine_char = '┊'
" Specify max indent level to use.
let g:indentLine_indentLevel = 5
" Use colorscheme to highlight conceal (default: 1).
"let g:indentLine_setColors = 0
" Specify terminal vim indent line color.
"let g:indentLine_color_term = 239

" Toggle lines on and off with command :IndentLinesToggle.

" }}}
" ----------------------------------------------------------------------------
" Dash {{{
" ----------------------------------------------------------------------------
" Remap :Dash to <Leader>d.
nmap <silent> <Leader>d <Plug>DashSearch
" Switch to Dash.app immediately upon search (default: 1).
"let g:dash_activate = 0

" }}}
" ============================================================================
